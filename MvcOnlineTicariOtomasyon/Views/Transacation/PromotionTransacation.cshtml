@model MvcOnlineTicariOtomasyon.Models.Classes.Transaction
@{
    ViewBag.Title = "PromotionTransacation";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}






<style>
    #salesTable {
        display: none; /* Tabloyu gizle */
    }

    #currentTable {
        display: none; /* Tabloyu gizle */
    }
   
</style>

<div class="row">
    <div class="col-md-12">
        <br />
        <h2>Promosyonlu Satış Oluştur</h2>
        <form class="form-group" method="post" action="@Url.Action("PromotionTransacation", "Transacation")">
            <div id="transacationForm">



                <div class="row">
                    <div class="col-md-6">
                        <label>Sipariş No</label>
                        @Html.TextBoxFor(x => x.SerialNumber, new { @Value = ViewBag.BillingNumber, @readonly = "readonly", @class = "form-control", @id = "serialNumber" })
                    </div>
                    <div class="col-md-6">
                        <label>Cari</label>
                        @Html.DropDownListFor(x => x.Currentid, (List<SelectListItem>)ViewBag.Current, "Seçiniz", new { @class = "form-control" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <label>Promosyon</label>
                        @Html.DropDownList("currentDropdown", (List<SelectListItem>)ViewBag.Promotion, "Seçiniz", new { @class = "form-control" })
                       
                    </div>
                    <div class="col-md-6">

                        <table style="margin-top:35px;" id="currentTable">

                            <tbody id="currenttable">

                                <!-- Tablo satırları burada dinamik olarak eklenecek -->
                            </tbody>
                        </table>

                        @Html.HiddenFor(x => x.Employeeid, new { @Value = ViewBag.CurrentUser, @readonly = "readonly", @class = "form-control", })
                    </div>
                </div>
                <br />
                <div class="col-md-12">
                    <table id="PromotionTable" class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Promosyon Adı</th>
                                <th>Bitiş Tarihi</th>
                                <th>Ürün Adı</th>
                                <th>Puanı</th>

                            </tr>
                        </thead>
                        <tbody id="PromotionTable">
                            <!-- Tablo satırları burada dinamik olarak eklenecek -->
                        </tbody>
                    </table>

                </div>

                <div class="row">
                    <div class="col-md-6">
                        <label for="date">Sevk Tarih</label>
                        <input type="date" id="date" name="date" class="form-control">
                    </div>
                    <div class="col-md-6">
                        <label>Ürün</label>
                        @Html.DropDownListFor(x => x.Productid, (List<SelectListItem>)ViewBag.Product, "Seçiniz", new { @class = "form-control" })
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-6">
                        <label>Fiyat</label>
                        @Html.HiddenFor(X => X.Price, new { @id = "hiddenPrice" })
                        @Html.TextBoxFor(X => X.Price, new { @readonly = "readonly", @class = "form-control" })
                    </div>
                    <div class="col-md-6">
                        <label>Miktar</label>
                        @Html.TextBoxFor(X => X.Amount, new { @class = "form-control" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <label>Toplam Fiyat</label>
                        @Html.HiddenFor(X => X.TotalPrice, new { @id = "hiddenTotalPrice" }) <!-- Gizli alan -->
                      
                        @Html.TextBoxFor(X => X.TotalPrice, new { @readonly = "readonly", @class = "form-control" })
                    </div>
                    <br />
                    <div class="col-md-6">
                        <lable>Puan</lable>
                     <input class="form-control" type="text" id="Point" readonly>
                   
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-6">
                        <button id="add" class="btn btn-outline-warning" type="button">Ekle</button>
                        <a class="btn btn-danger" href="~/Transacation/Index">Cancel</a>
                    </div>
                    <br />

                    <div class="col-md-12">
                        <br />
                        <table id="salesTable" class="table">
                            <thead>
                                <tr>
                                    <th>Sipariş No</th>
                                    <th>Cari</th>
                                    <th>Müşteri Temsilcisi</th>
                                    <th>Tarih</th>
                                    <th>Ürün</th>
                                    <th>Fiyat</th>
                                    <th>Miktar</th>
                                    <th>Toplam Fiyat</th>
                                    <th>Puan</th>
                                    <th>Sil</th>
                                </tr>
                            </thead>
                            <tbody id="salesTableBody">
                                <!-- Tablo satırları burada dinamik olarak eklenecek -->
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="8"></td>
                                    <td id="totalPointsFooter"><strong>Toplam Puan:</strong> <span id="totalProductPoints"></span></td>
                                    <td></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>

                    <div class="col-md-6"><button class="btn btn-outline-success" id="submit">Sipariş Oluştur </button></div>
                    <div class="col-md-6"></div>

                </div>
            </div>
        </form>
    </div>
</div>

<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>

<script>
    $(function () {
        $('#submit').hide();

        $('#Productid').change(function () {
            var selectedProductId = $(this).val();
            $('#Amount').val('');
            $('#TotalPrice').val('');

            $.ajax({
                url: '/Transacation/GetProductPrice',
                type: 'GET',
                dataType: 'json',
                data: { productId: selectedProductId },
                success: function (data) {
                    var formattedPrice = data.price.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });
                    $('#Price').val(formattedPrice);
                    $('#hiddenPrice').val(data.price);
                }
            });

            $.ajax({
                url: '/Transacation/GetPoint',
                type: 'GET',
                dataType: 'json',
                data: { productId: selectedProductId },
                success: function (data) {


                    $('#Point').val(data.point);

                }
            });



            // '<td>' + data.promotionproductid + '</td>' +

        });
        $(document).ready(function () {
            $('#currentDropdown').change(function () {
                var selectedValue = $(this).val();
                // Seçilen değeri kullanarak istediğiniz işlemleri yapabilirsiniz

                $.ajax({
                    url: '/Transacation/GetPromotoion',
                    type: 'GET',
                    dataType: 'json',
                    data: { promotionId: selectedValue },
                    success: function (data) {


                        // Yeni bir tablo satırı oluştur
                        var newRow = '<tr>' +

                            '<td>' + data.promotionname + '</td>' +
                           
                            '<td>' + data.endDate + '</td>' +
                            '<td>' + data.promotionproductname + '</td>' +

                            '<td>' + data.promotionpoint + '</td>' +

                            '</tr>';

                        // Tablonun tbody'sine yeni satırı ekle
                        $('#PromotionTable tbody').append(newRow);
                    }
                });
            });
        });


        $('#Currentid').change(function () {
            $('#salesTableBody').empty();
            $('#currentTable').empty();
           



            var selectedCurrentId = $(this).val();
            $.ajax({
                url: '/Transacation/GetCurrentAmount',
                type: 'GET',
                dataType: 'json',
                data: { currentId: selectedCurrentId },
                success: function (data) {
                    console.log(data); // Sunucudan gelen veriyi kontrol etmek için
                    var formattedPrice = data.amount.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });
                    $('#CurrentAmount').val(formattedPrice);
                    $('#hiddenPrice').val(data.price);
                    var icon = data.amount < 10000 ? '<i class="fas fa-exclamation-circle" style="color: red; margin-left:10px; "></i> <span style="color: red;">Bakiye Kritik Olduğunda Satış Yapılmaz</span>' : ''; // Eğer gelen değer 10000'den küçükse, icon ekleyin, değilse boş bırakın
                    $('#currentTable').append('<tr>' +
                        '<td>Bakiye: ' + formattedPrice + icon + '</td>' + // formattedPrice değişkenini ve icon'u kullanın
                        '</tr>');
                    $('#currentTable').show();
                    // Add butonunu pasif hale getirme
                    if (data.amount < 10000) {
                        $('#add').prop('disabled', true);
                    } else {
                        $('#add').prop('disabled', false);
                    }
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText); // Hata durumunda konsola yazdır
                }
            });
        });




        $('#Price, #Amount,#Point ').on('input', function () {
            var price = parseFloat($('#hiddenPrice').val()) || 0;
            var amount = parseFloat($('#Amount').val()) || 0;
            var point = parseFloat($('#Point').val()) || 0;
            var totalPrice = (price * amount).toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });
            var totalPoint = (point * amount);
            $('#TotalPoint').val(totalPoint);
            $('#TotalPrice').val(totalPrice);
            $('#hiddenTotalPrice').val((price * amount).toFixed(0));
        });



        $('#add').click(function () {
            var siparis = $('#serialNumber').val();
            var Currentid = $('#Currentid option:selected').val();
            var CurrentidDisplay = $('#Currentid option:selected').text();
            var Employeeid = $('#Employeeid').val();
            var EmployeeidDisplay = $('#Employeeid option:selected').text();
            var date = $('#date').val();
            var Productid = $('#Productid').val();
            var ProductidDisplay = $('#Productid option:selected').text();
            var Price = $('#hiddenPrice').val();
            var PriceDisplay = $('#Price').val();
            var Amount = $('#Amount').val();
            var TotalPrice = $('#hiddenTotalPrice').val();
            var TotalPriceDisplay = $('#TotalPrice').val();
            var ProductPoint = $('#Point').val();

            $('#salesTableBody').append('<tr>' +
                '<td>' + siparis + '</td>' +
                '<td>' + CurrentidDisplay + '</td>' +
                '<td>' + Employeeid + '</td>' +
                '<td>' + date + '</td>' +
                '<td>' + ProductidDisplay + '</td>' +
                '<td>' + PriceDisplay + '</td>' +
                '<td>' + Amount + '</td>' +
                '<td>' + TotalPriceDisplay + '</td>' +
                '<td>' + ProductPoint + '</td>' +
                '<td><button class="btn btn-danger delete-row">Sil</button></td>' +
                '</tr>');

            // Satır eklendikten sonra ürün puanlarını topla ve altta göster
            calculateTotalProductPoints();

            adjustTableVisibility();
        });

        function calculateTotalProductPoints() {
            var totalProductPoints = 0;
            $('#salesTableBody tr').each(function () {
                var productPoint = parseInt($(this).find('td:eq(8)').text()); // 8. sütundaki (indeks 7) ürün puanını al
                totalProductPoints += productPoint;
            });
            $('#totalProductPoints').text(totalProductPoints);
        }



        $('form').submit(function (event) {
            event.preventDefault(); // Formun normal submit işlemini engelle
            var transactions = [];
            $('#salesTableBody tr').each(function () {
                var $row = $(this);
                var transaction = {
                    SerialNumber: $row.find('td:eq(0)').text(),
                    Currentid: $row.find('td:eq(1)').text(),
                    Employeeid: $row.find('td:eq(2)').text(),
                    Date: $row.find('td:eq(3)').text(),
                    Productid: $row.find('td:eq(4)').text(),
                    Price: $row.find('td:eq(5)').text(),
                    Amount: $row.find('td:eq(6)').text(),
                    TotalPrice: $row.find('td:eq(7)').text()
                };
                transactions.push(transaction);
            });

            $.ajax({
                url: '/Transacation/AddTransacation',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify(transactions),
                success: function (response) {
                    if (response.success) {
                        console.log('Veriler başarıyla gönderildi.');
                    } else {
                        console.log('Veriler gönderilirken bir hata oluştu.');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('AJAX isteği sırasında bir hata oluştu: ' + error);
                }
            });
        });

        $('#salesTableBody').on('click', '.delete-row', function () {
            $(this).closest('tr').remove();
            adjustTableVisibility();
        });

        function adjustTableVisibility() {
            var rowCount = $('#salesTableBody tr').length;
            if (rowCount == 0) {
                $('#salesTable').hide();
                $('#submit').hide();
            } else {
                $('#salesTable').show();
                $('#submit').show();
            }
        }

        var currentDate = new Date();
        var day = currentDate.getDate();
        var month = currentDate.getMonth() + 1;
        var year = currentDate.getFullYear();
        var formattedDate = year + '-' + (month < 10 ? '0' + month : month) + '-' + (day < 10 ? '0' + day : day);
        $('#date').val(formattedDate);
    });
</script>



